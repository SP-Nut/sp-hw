// Seed script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Supabase
import { config } from 'dotenv'
import { createClient } from '@supabase/supabase-js'

// ‡πÇ‡∏´‡∏•‡∏î environment variables
config({ path: '.env.local' })

// Define data inline (moved from mock files)
const categories = [
  { id: "opaque-roof", name: "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó‡∏≠‡∏∂‡∏ó‡∏∂‡∏ö" },
  { id: "translucent-roof", name: "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á" },
  { id: "installation", name: "‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á" },
  { id: "tools", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠" },
  { id: "hardware", name: "‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå" },
  { id: "paint", name: "‡∏™‡∏µ" },
  { id: "others", name: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" }
];

const brands = [
  { id: "SCG", name: "SCG" },
  { id: "Thaibev", name: "Thaibev" },
  { id: "CP", name: "CP" },
  { id: "Sahapat", name: "‡∏™‡∏´‡∏û‡∏±‡∏í‡∏ô‡πå" },
  { id: "Siam", name: "‡∏™‡∏¢‡∏≤‡∏°" },
  { id: "Thai", name: "‡πÑ‡∏ó‡∏¢" },
  { id: "Asia", name: "‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢" },
  { id: "Global", name: "‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•" },
  { id: "Standard", name: "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" },
  { id: "Premium", name: "‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°" },
  { id: "Economy", name: "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î" },
  { id: "Professional", name: "‡πÇ‡∏õ‡∏£‡πÄ‡∏ü‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ô‡∏±‡∏•" },
  { id: "Industrial", name: "‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°" },
  { id: "Commercial", name: "‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏•" },
  { id: "Residential", name: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢" },
  { id: "Universal", name: "‡∏¢‡∏π‡∏ô‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏ã‡∏•" },
  { id: "Supreme", name: "‡∏™‡∏∏‡∏û‡∏£‡∏µ‡∏°" },
  { id: "Ultimate", name: "‡∏≠‡∏±‡∏•‡∏ï‡∏¥‡πÄ‡∏°‡∏ó" },
  { id: "Advanced", name: "‡πÅ‡∏≠‡∏î‡∏ß‡∏≤‡∏ô‡∏ã‡πå" },
  { id: "Basic", name: "‡πÄ‡∏ö‡∏™‡∏¥‡∏Ñ" },
  { id: "Essential", name: "‡πÄ‡∏≠‡∏™‡πÄ‡∏ã‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏•" },
  { id: "Plus", name: "‡∏û‡∏•‡∏±‡∏™" },
  { id: "Max", name: "‡πÅ‡∏°‡πá‡∏Å‡∏ã‡πå" },
  { id: "Pro", name: "‡πÇ‡∏õ‡∏£" },
  { id: "Super", name: "‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå" },
  { id: "Mega", name: "‡πÄ‡∏°‡∏Å‡πâ‡∏≤" },
  { id: "Ultra", name: "‡∏≠‡∏±‡∏•‡∏ï‡∏£‡∏≤" },
  { id: "Elite", name: "‡∏≠‡∏µ‡∏•‡∏¥‡∏ó" },
  { id: "Master", name: "‡∏°‡∏≤‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå" }
];

// Sample products data - you may want to add more
const products = [
  {
    id: 1,
    name: "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó ‡∏ï‡∏£‡∏≤ SCG 0.35 ‡∏°‡∏°.",
    price: 450,
    originalPrice: 500,
    brand: "SCG",
    category: "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó‡∏≠‡∏∂‡∏ó‡∏∂‡∏ö",
    rating: 4.5,
    reviews: 28,
    image: "/images/products/roof-sheet-1.jpg",
    inStock: true,
    description: "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ‡∏Å‡∏±‡∏ô‡∏™‡∏ô‡∏¥‡∏° ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á"
  }
  // Add more sample products as needed
];

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY! // ‡πÉ‡∏ä‡πâ service role key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö seed

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing environment variables:')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå')
  console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function seedCategories() {
  console.log('üå± Seeding categories...')
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà category ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'all'
  const categoriesToSeed = categories
    .filter(cat => cat.id !== 'all')
    .map(cat => ({
      id: cat.id,
      name: cat.name
    }))

  const { data, error } = await supabase
    .from('categories')
    .upsert(categoriesToSeed, { onConflict: 'id' })

  if (error) {
    console.error('‚ùå Error seeding categories:', error)
    throw error
  }

  console.log(`‚úÖ Seeded ${categoriesToSeed.length} categories`)
  return data
}

async function seedBrands() {
  console.log('üå± Seeding brands...')
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà brand ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'all'
  const brandsToSeed = brands
    .filter(brand => brand.id !== 'all')
    .map(brand => ({
      id: brand.id,
      name: brand.name
    }))

  const { data, error } = await supabase
    .from('brands')
    .upsert(brandsToSeed, { onConflict: 'id' })

  if (error) {
    console.error('‚ùå Error seeding brands:', error)
    throw error
  }

  console.log(`‚úÖ Seeded ${brandsToSeed.length} brands`)
  return data
}

async function seedProducts() {
  console.log('üå± Seeding products...')
  
  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
  await supabase.from('products').delete().neq('id', 0)
  
  const productsToSeed = products.map(product => ({
    name: product.name,
    price: product.price,
    original_price: product.originalPrice,
    brand_id: product.brand,
    category_id: product.category,
    rating: product.rating,
    reviews: product.reviews,
    image: product.image,
    in_stock: product.inStock,
    description: product.description
  }))

  const { data, error } = await supabase
    .from('products')
    .insert(productsToSeed)

  if (error) {
    console.error('‚ùå Error seeding products:', error)
    throw error
  }

  console.log(`‚úÖ Seeded ${productsToSeed.length} products`)
  return data
}

async function main() {
  try {
    console.log('üöÄ Starting database seed...')
    
    // Seed ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (categories ‡πÅ‡∏•‡∏∞ brands ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ products)
    await seedCategories()
    await seedBrands()
    await seedProducts()
    
    console.log('üéâ Database seed completed successfully!')
  } catch (error) {
    console.error('üí• Seed failed:', error)
    process.exit(1)
  }
}

// Run the seed function
if (require.main === module) {
  main()
}

export { seedCategories, seedBrands, seedProducts }