import { Client } from '@line/bot-sdk';

interface LineConfig {
  channelAccessToken: string;
  channelSecret: string;
}

interface CartItem {
  id: number;
  name: string;
  brand: string;
  price: number;
  quantity: number;
  originalPrice?: number;
}

interface OrderData {
  items: CartItem[];
  subtotal: number;
  savings: number;
  shipping: number;
  total: number;
  customerInfo?: {
    name?: string;
    phone?: string;
    email?: string;
  };
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Bot Client
export const createLineClient = (): Client => {
  const config: LineConfig = {
    channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || '',
    channelSecret: process.env.LINE_CHANNEL_SECRET || '',
  };

  if (!config.channelAccessToken || !config.channelSecret) {
    throw new Error('LINE_CHANNEL_ACCESS_TOKEN ‡πÅ‡∏•‡∏∞ LINE_CHANNEL_SECRET ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variables');
  }

  return new Client(config);
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏ô LINE
export const generateOrderMessage = (orderData: OrderData): string => {
  const currentDate = new Date().toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  let message = `üõí ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà - SP Hardware\n`;
  message += `üìÖ ${currentDate}\n\n`;
  
  message += `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:\n`;
  message += `${'='.repeat(30)}\n`;
  
  orderData.items.forEach((item, index) => {
    message += `${index + 1}. ${item.name}\n`;
    message += `   üè≠ ${item.brand}\n`;
    message += `   üí∞ ${item.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó x ${item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô\n`;
    message += `   üíµ ‡∏£‡∏ß‡∏°: ${(item.price * item.quantity).toLocaleString()} ‡∏ö‡∏≤‡∏ó\n\n`;
  });
  
  message += `${'='.repeat(30)}\n`;
  message += `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${orderData.subtotal.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
  
  if (orderData.savings > 0) {
    message += `üéâ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: -${orderData.savings.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
  }
  
  message += `üöö ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: ${orderData.shipping === 0 ? '‡∏ü‡∏£‡∏µ' : `${orderData.shipping.toLocaleString()} ‡∏ö‡∏≤‡∏ó`}\n`;
  message += `${'='.repeat(30)}\n`;
  message += `üíé ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: ${orderData.total.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n\n`;
  
  if (orderData.customerInfo) {
    message += `üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:\n`;
    if (orderData.customerInfo.name) message += `üìù ‡∏ä‡∏∑‡πà‡∏≠: ${orderData.customerInfo.name}\n`;
    if (orderData.customerInfo.phone) message += `üìû ‡πÇ‡∏ó‡∏£: ${orderData.customerInfo.phone}\n`;
    if (orderData.customerInfo.email) message += `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${orderData.customerInfo.email}\n`;
    message += `\n`;
  }
  
  message += `üìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå\n`;
  message += `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ SP Hardware`;
  
  return message;
};

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Official Account (‡πÅ‡∏ä‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß)
export const sendOrderToLine = async (orderData: OrderData, targetUserId?: string): Promise<boolean> => {
  try {
    const client = createLineClient();
    const message = generateOrderMessage(orderData);

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ targetUserId ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (Push Message)
    if (targetUserId) {
      await client.pushMessage(targetUserId, {
        type: 'text',
        text: message
      });
      console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE User ID: ${targetUserId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      return true;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ targetUserId ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà Official Account
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß (Broadcast Message)
    const result = await sendBroadcastMessage(orderData);
    return result;

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ LINE:', error);
    return false;
  }
};

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° Official Account ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
export const sendBroadcastMessage = async (orderData: OrderData): Promise<boolean> => {
  try {
    const client = createLineClient();
    const message = generateOrderMessage(orderData);

    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Group ID ‡∏´‡∏£‡∏∑‡∏≠ Room ID ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const groupId = process.env.LINE_GROUP_ID;
    const roomId = process.env.LINE_ROOM_ID;

    if (groupId) {
      await client.pushMessage(groupId, {
        type: 'text',
        text: message
      });
      console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Group: ${groupId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      return true;
    }

    if (roomId) {
      await client.pushMessage(roomId, {
        type: 'text',
        text: message
      });
      console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Room: ${roomId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      return true;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Group/Room ID ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Broadcast (‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô)
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Broadcast Message ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Group ID ‡∏´‡∏£‡∏∑‡∏≠ Room ID - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Broadcast');
    
    await client.broadcast({
      type: 'text',
      text: `üì¢ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å SP Hardware!\n\n${message}\n\nüí¨ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`
    });

    console.log('‚úÖ ‡∏™‡πà‡∏á Broadcast Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Broadcast:', error);
    
    // ‡∏ñ‡πâ‡∏≤ Broadcast ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ
    if ((error as Error).message?.includes('Invalid reply token')) {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE_GROUP_ID ‡∏´‡∏£‡∏∑‡∏≠ LINE_ROOM_ID ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env.local');
    }
    
    return false;
  }
};

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà)
export const notifyAdminNewOrder = async (orderData: OrderData): Promise<boolean> => {
  try {
    const adminUserId = process.env.LINE_ADMIN_USER_ID;
    if (!adminUserId) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_ADMIN_USER_ID ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ');
      return false;
    }

    const client = createLineClient();
    const message = `üîî ‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà!\n\n${generateOrderMessage(orderData)}\n\nüëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå`;

    await client.pushMessage(adminUserId, {
      type: 'text',
      text: message
    });

    console.log(`‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô LINE User ID: ${adminUserId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    return true;

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:', error);
    return false;
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡∏´‡∏£‡∏∑‡∏≠ Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
export const createOrderQuickReply = () => {
  return {
    items: [
      {
        type: 'action' as const,
        action: {
          type: 'message' as const,
          label: '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
          text: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå'
        }
      },
      {
        type: 'action' as const,
        action: {
          type: 'message' as const,
          label: '‚ùì ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
          text: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
        }
      },
      {
        type: 'action' as const,
        action: {
          type: 'message' as const,
          label: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
          text: '‡∏Ç‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå'
        }
      }
    ]
  };
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LINE Bot
export const checkLineConnection = async (): Promise<boolean> => {
  try {
    const client = createLineClient();
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bot Profile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    await client.getBotInfo();
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE Bot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE Bot ‡πÑ‡∏î‡πâ:', error);
    return false;
  }
};